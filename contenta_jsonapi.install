<?php

use Drupal\Component\Serialization\Yaml;

/**
 * Implements hook_install().
 */
function contenta_jsonapi_install() {
  // Enable CORS for localhost.
  /** @var \Drupal\Core\DrupalKernelInterface $drupal_kernel */
  $drupal_kernel = \Drupal::service('kernel');
  $file_path = $drupal_kernel->getAppRoot() . '/' . $drupal_kernel->getSitePath();
  $filename = $file_path . '/default.services.yml';
  if (file_exists($filename)) {
    $services_yml = file_get_contents($filename);

    $yml_data = Yaml::decode($services_yml);
    if (empty($yml_data['parameters']['cors.config']['enabled'])) {
      $yml_data['parameters']['cors.config']['enabled'] = TRUE;
      $yml_data['parameters']['cors.config']['allowedHeaders'] = ['*'];
      $yml_data['parameters']['cors.config']['allowedMethods'] = ['*'];
      $yml_data['parameters']['cors.config']['allowedOrigins'] = ['localhost:*'];

      file_put_contents($filename, Yaml::encode($yml_data));
    }
  }
  // Now generate the OAuth2 keys.
  _contenta_jsonapi_generate_keys();
}

/**
 * Generates the OAuth Keys.
 */
function _contenta_jsonapi_generate_keys() {
  // Build all the dependencies manually to avoid having to rely on the
  // container to be ready.
  $dir_name = 'keys';
  /** @var \Drupal\simple_oauth\Service\KeyGeneratorService $key_gen */
  $key_gen = \Drupal::service('simple_oauth.key.generator');
  /** @var \Drupal\simple_oauth\Service\Filesystem\Filesystem $file_system */
  $file_system = \Drupal::service('simple_oauth.filesystem');
  /** @var \Drupal\Core\Logger\LoggerChannelInterface $logger */
  $logger = \Drupal::service('logger.channel.contentacms');

  $relative_path = DRUPAL_ROOT . '/../' . $dir_name;
  if (!$file_system->isDirectory($relative_path)) {
    $file_system->mkdir($relative_path);
  }
  $keys_path = $file_system->realpath($relative_path);
  $pub_filename = sprintf('%s/public.key', $keys_path);
  $pri_filename = sprintf('%s/private.key', $keys_path);

  if ($file_system->fileExist($pub_filename) && $file_system->fileExist($pri_filename)) {
    // 1. If the file already exists, then just set the correct permissions.
    $file_system->chmod($pub_filename, 0600);
    $file_system->chmod($pri_filename, 0600);
    $logger->info('Key pair for OAuth 2 token signing already exists.');
  }
  else {
    // 2. Generate the pair in the selected directory.
    try {
      $key_gen->generateKeys($keys_path);
    } catch (\Exception $e) {
      // Unable to generate files after all.
      $logger->error($e->getMessage());
      return;
    }
  }
}
